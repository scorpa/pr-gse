#summary Java Server Pages (JSP)

= Java Server Pages (JSP) =

== Aufbau einer JSP ==

JSPs enthalten im Wesentlichen HTML-Code und zusätzliche JSP-Tags und Scripting-Elemente. Die Servlet-Engine übersetzt eine JSP normalerweise beim ersten Aufruf in ein Java-Servlet. Im Apache Tomcat Server trägt dieser JSP -> Java - Compiler den Namen "Jasper".

Auf die Scripting-Möglichkeiten in JSPs wird hier nicht näher eingegangen, da bei intensiver Verwendung von JSP-Scripting ein ziemlich unlesbares Durcheinander von Java und HTML herauskommt.

Als Beispiel wird hier die Applikation [http://code.google.com/p/pr-gse/source/browse/#svn/trunk/web_beispiele/anmeldung anmeldung] verwendet, welche bereits im Thema [thema_web_servlets Servlets] beschrieben wurde.

Die Seite [http://code.google.com/p/pr-gse/source/browse/trunk/web_beispiele/anmeldung/web/jsp/schade.jsp schade.jsp] sieht etwa folgendermaßen aus:

http://pr-gse.googlecode.com/svn/wiki/images/servlet/schade.jpg

Neben dem fixen Text (Überschrift, ...) wird hier eine dynamisch generierte Tabelle angezeigt. Das passiert mit folgendem Code:
{{{
        <table border="1">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>eingetragen am/um </th>
                    <th>zugesagt</th>
                </tr>
            </thead>
            <tbody>
                <anmeldung:liste>
                    <tr>
                        <td><anmeldung:eintrag feld="email"/></td>
                        <td><anmeldung:eintrag feld="zeitpunkt"/></td>
                        <td><anmeldung:eintrag feld="zusage"/></td>
                    </tr>
                </anmeldung:liste>
            </tbody>
        </table>
}}}

== Selbst definierte Tags ==

Hier findet man folgende bekannte HTML-Tags wie man sie z.B [http://de.selfhtml.org/html/tabellen/index.htm hier] dokumentiert findet:
  * `table` - für die Definition der Tabelle
  * `thead` - für die Definition der Überschriftenzeile
  * `th` - die Zellen der Überschriftenzeile
  * `tbody` - die Daten der Tabelle
  * `tr` - die Zeilen der Tabelle
  * `td` - die einzelnen Datenfelder der Tabelle

Dazwischen befinden sich aber noch die selbst definierten Tags `anmeldung:liste` und `anmeldung:eintrag`. Diese Tags werden folgendermaßen definiert:

Die JSP-Seite beginnt mit dem JSP-Prolog:
{{{
<%@page contentType="text/html" pageEncoding="ISO-8859-1"%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd">
}}}

Danach befindet sich ein Verweis auf eine Tag-Bibliothek:
{{{
<%@taglib prefix="anmeldung" uri="/anmeldung"%>
}}}

Der Prefix `anmeldung` definiert, dass innerhalb der JSP vor allen Tags aus dieser Tag-Bibliothek eben dieser Prefix steht, eben `anmeldung:liste` und `anmeldung:eintrag`.

Der universal resource identifier (uri) `/anmeldung` ist auch im Deployment-Deskriptor [http://code.google.com/p/pr-gse/source/browse/trunk/web_beispiele/anmeldung/web/WEB-INF/web.xml web.xml] zu finden:
{{{
    <jsp-config>
        <taglib>
            <taglib-location>
                /WEB-INF/tld/anmeldung.tld
            </taglib-location>
            <taglib-uri>
                /anmeldung
            </taglib-uri>
        </taglib>
    </jsp-config>
}}}

Der entsprechende `taglib`-Eintrag verweist auf den Tag-Library-Descriptor [http://code.google.com/p/pr-gse/source/browse/trunk/web_beispiele/anmeldung/web/WEB-INF/tld/anmeldung.tld anmeldung.tld] im Verzeichnis `WEB-INF/tld`.

== Tag-Library-Deskriptor (TLD) ==

Auch ein Tag-Library-Deskriptor (TLD) ist eine Datei im XML-Format und definiert einzelne Tags. Am Beginn der Datei steht wie immer der XML-Prolog und das Basiselement `taglib` mit dem Verweis auf das XML-Schema:
{{{
<?xml version="1.0" encoding="UTF-8" ?>
<taglib xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
    version="2.0">
}}}

Danach kommen Taglib-Version und URI:
{{{
        <tlib-version>1.0</tlib-version>
        <uri>/anmeldung</uri>
}}}

Dann kommen die eigentlichen Tag-Definitionen. Die wesentlichsten Elemente einer Tag-Definition sind der Name des Tags und die dazugehörige Tag-Handler-Klasse. Weiters wird hier für den Tag `eintrag` auch noch ein Attribut mit dem Namen `feld` definiert.
{{{
        <tag>
            <tag-class>anmeldung.web.ListeTag</tag-class>
            <name>liste</name>
        </tag>

        <tag>
            <tag-class>anmeldung.web.EintragTag</tag-class>
            <name>eintrag</name>
            <attribute>
                <name>feld</name>
                <required>true</required>
            </attribute>
        </tag>
}}}

Findet sich nun in der JSP ein hier definierter Tag, dann werden an dieser Stelle die entsprechenden Methoden des zugehörigen Tag-Handlers aufgerufen.

== Tag-Handler-Klasse ==
Zum Tag `liste` gehört die Tag-Handler-Klasse [http://code.google.com/p/pr-gse/source/browse/trunk/web_beispiele/anmeldung/src/java/anmeldung/web/ListeTag.java ListeTag]. Meist ist ein Tag-Handler eine Subklasse von `TagSupport`.

An dieser Stelle sind noch ein paar Begriffe im Zusammenhang mit HTML- bzw. XML-Tags zu erklären. Der Tag `anmeldung:liste` besteht aus 3 Teilen:
  * `<anmeldung:liste>` ist der Start des Tags
  * `</anmeldung:liste>` ist das Ende des Tags
  * alles dazwischen ist der Körper (body) des Tags

So sind auch die Methoden der Klasse `TagSupport` zu verstehen:
  * an der Stelle, wo der Tag startet, wird die Methode `doStartTag()` ausgeführt.
  * Vor dem Ende des Tags wird die Methode `doAfterBody()` ausgeführt.
  * An der Stelle des Tag-Endes wird die Methode `doEndTag()` ausgeführt.
Man kann nun diese Methoden bei Bedarf überschreiben.

 